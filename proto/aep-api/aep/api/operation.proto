// Copyright 2019 Google LLC.
// Modifications Copyright 2025 AEP.dev
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package aep.api;

import "aep/api/problem_details.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/descriptor.proto";

option cc_enable_arenas = true;
option go_package = "aep.dev/api";
option java_multiple_files = true;
option java_outer_classname = "OperationsProto";
option java_package = "dev.aep.api";
option objc_class_prefix = "AEP";

extend google.protobuf.MethodOptions {
  // Additional information regarding long-running operations.
  // In particular, this specifies the types that are returned from
  // long-running operations.
  //
  // Required for methods that return `aep.api.Operation`; invalid otherwise.
  aep.api.OperationInfo operation_info = 1049;
}

// This resource represents a long-running operation that is the result of a
// network API call.
message Operation {
  // The server-assigned path, which is only unique within the same service that
  // originally returns it. If you use the default HTTP mapping, the
  // `path` should be a resource path ending with `operations/{unique_id}`.
  string path = 1;

  // Service-specific metadata associated with the operation.  It typically
  // contains progress information and common metadata such as create time.
  // Some services might not provide such metadata.  Any method that returns a
  // long-running operation should document the metadata type, if any.
  google.protobuf.Any metadata = 2;

  // If the value is `false`, it means the operation is still in progress.
  // If `true`, the operation is completed, and either `error` or `response` is
  // available.
  bool done = 3;

  // The operation result, which can be either an `error` or a valid `response`.
  // If `done` == `false`, neither `error` nor `response` is set.
  // If `done` == `true`, exactly one of `error` or `response` is set.
  oneof result {
    // The error result of the operation in case of failure or cancellation.
    aep.api.ProblemDetails error = 4;

    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    google.protobuf.Any response = 5;
  }
}

// The request message for
// [Operations.GetOperation][aep.api.Operations.GetOperation].
message GetOperationRequest {
  // The path of the operation resource.
  string path = 1;
}

// The request message for
// [Operations.ListOperations][aep.api.Operations.ListOperations].
message ListOperationsRequest {
  // The path of the operation's parent resource.
  string parent = 4;

  // The standard list filter.
  string filter = 1;

  // The standard list page size.
  int32 max_page_size = 2;

  // The standard list page token.
  string page_token = 3;
}

// The response message for
// [Operations.ListOperations][aep.api.Operations.ListOperations].
message ListOperationsResponse {
  // A list of operations that matches the specified filter in the request.
  repeated Operation operations = 1;

  // The standard List next-page token.
  string next_page_token = 2;
}

// The request message for
// [Operations.CancelOperation][aep.api.Operations.CancelOperation].
message CancelOperationRequest {
  // The path of the operation resource to be cancelled.
  string path = 1;
}

// The request message for
// [Operations.DeleteOperation][aep.api.Operations.DeleteOperation].
message DeleteOperationRequest {
  // The path of the operation resource to be deleted.
  string path = 1;
}

// The request message for
// [Operations.WaitOperation][aep.api.Operations.WaitOperation].
message WaitOperationRequest {
  // The path of the operation resource to wait on.
  string path = 1;

  // The maximum duration to wait before timing out. If left blank, the wait
  // will be at most the time permitted by the underlying HTTP/RPC protocol.
  // If RPC context deadline is also specified, the shorter one will be used.
  google.protobuf.Duration timeout = 2;
}

// A message representing the message types used by a long-running operation.
//
// Example:
//
//   rpc LongRunningRecognize(LongRunningRecognizeRequest)
//       returns (aep.api.Operation) {
//     option (aep.api.operation_info) = {
//       response_type: "LongRunningRecognizeResponse"
//       metadata_type: "LongRunningRecognizeMetadata"
//     };
//   }
message OperationInfo {
  // Required. The message name of the primary return type for this
  // long-running operation.
  // This type will be used to deserialize the LRO's response.
  //
  // If the response is in a different package from the rpc, a fully-qualified
  // message name must be used (e.g. `google.protobuf.Struct`).
  //
  // Note: Altering this value constitutes a breaking change.
  string response_type = 1;

  // Required. The message name of the metadata type for this long-running
  // operation.
  //
  // If the response is in a different package from the rpc, a fully-qualified
  // message name must be used (e.g. `google.protobuf.Struct`).
  //
  // Note: Altering this value constitutes a breaking change.
  string metadata_type = 2;
}