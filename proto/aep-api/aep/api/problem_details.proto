syntax = "proto3";

package aep.api;

option cc_enable_arenas = true;
option java_multiple_files = true;
option java_outer_classname = "ProblemDetailsProto";
option java_package = "dev.aep.api";
option objc_class_prefix = "AEP";

import "buf/validate/validate.proto";
import "google/protobuf/any.proto";

// ProblemDetails corresponds to the structure described by RFC 9457.
//
// The documentation of each field is drawn directly from RFC 9457 (edited only
// for formatting and to remove type information redundant with field type).
//
// It is intended to be used as the contents of the `details` field of a
// google.rpc.Status.
//
// The `additional_details` field is provided for APIs which need to provide
// additional structured error information.
message ProblemDetails {
  // A URI reference that identifies the problem type.
  //
  // Consumers **must** use the "type" URI (after resolution, if necessary) as
  // the problem type's primary identifier.
  //
  // When this member is not present, its value is assumed to be "about:blank".
  //
  // If the type URI is a locator (e.g., those with an "http" or "https"
  // scheme), dereferencing it **should** provide human-readable documentation
  // for the problem type (e.g., using HTML). However, consumers **should not**
  // automatically dereference the type URI, unless they do so when
  // providing information to developers (e.g., when a debugging tool is in
  // use).
  //
  // When "type" contains a relative URI, it is resolved relative to the
  // document's base URI, as per [URI], Section 5. However, using relative URIs
  // can cause confusion, and they might not be handled correctly by all
  // implementations.
  //
  // For example, if the two resources "https://api.example.org/foo/bar/123" and
  // "https://api.example.org/widget/456" both respond with a "type" equal to
  // the relative URI reference "example-problem", when resolved they will
  // identify different resources
  // ("https://api.example.org/foo/bar/example-problem" and
  // "https://api.example.org/widget/example-problem", respectively). As a
  // result, it is RECOMMENDED that absolute URIs be used in "type" when
  // possible and that when relative URIs are used, they include the full path
  // (e.g., "/types/123").
  //
  // The type URI is allowed to be a non-resolvable URI. For example, the tag
  // URI scheme [TAG] can be used to uniquely identify problem types:
  //
  //   `tag:example@example.org,2021-09-17:OutOfLuck`
  //
  // However, resolvable type URIs are encouraged by this specification because
  // it might become desirable to resolve the URI in the future. For example, if
  // an API designer used the URI above and later adopted a tool that resolves
  // type URIs to discover information about the error, taking advantage of that
  // capability would require switching to a resolvable URI, creating a new
  // identity for the problem type and thus introducing a breaking change.
  string type = 1 [(buf.validate.field).string.uri = true];

  // Indicates the HTTP status code generated by the origin server for this
  // occurrence of the problem.
  //
  // The "status" member, if present, is only advisory; it conveys the HTTP
  // status code used for the convenience of the consumer. Generators **must**
  // use the same status code in the actual HTTP response, to assure that
  // generic HTTP software that does not understand this format still behaves
  // correctly. See Section 5 for further caveats regarding its use.
  //
  // Consumers can use the status member to determine what the original status
  // code used by the generator was when it has been changed (e.g., by an
  // intermediary or cache) and when a message's content is persisted without
  // HTTP information. Generic HTTP software will still use the HTTP status
  // code.
  int32 status = 2;

  // Contains a short, human-readable summary of the problem type.
  //
  // It **should not** change from occurrence to occurrence of the problem,
  // except for localization (e.g., using proactive content negotiation; see
  // [HTTP], Section 12.1).
  //
  // The "title" string is advisory and is included only for users who are
  // unaware of and cannot discover the semantics of the type URI (e.g., during
  // offline log analysis).
  string title = 3;

  // Contains a human-readable explanation specific to this occurrence of the
  // problem.
  //
  // The "detail" string, if present, ought to focus on helping the client
  // correct the problem, rather than giving debugging information.
  //
  // Consumers **should not** parse the "detail" member for information;
  // extensions are more suitable and less error-prone ways to obtain such
  // information.
  string detail = 4;

  // Contains a URI reference that identifies the specific occurrence of the
  // problem.
  //
  // When the "instance" URI is dereferenceable, the problem details object can
  // be fetched from it. It might also return information about the problem
  // occurrence in other formats through use of proactive content negotiation
  // (see [HTTP], Section 12.5.1).
  //
  // When the "instance" URI is not dereferenceable, it serves as a unique
  // identifier for the problem occurrence that may be of significance to the
  // server but is opaque to the client.
  //
  // When "instance" contains a relative URI, it is resolved relative to the
  // document's base URI, as per [URI], Section 5. However, using relative URIs
  // can cause confusion, and they might not be handled correctly by all
  // implementations.
  //
  // For example, if the two resources "https://api.example.org/foo/bar/123" and
  // "https://api.example.org/widget/456" both respond with an "instance" equal
  // to the relative URI reference "example-instance", when resolved they will
  // identify different resources
  // ("https://api.example.org/foo/bar/example-instance" and
  // "https://api.example.org/widget/example-instance", respectively). As a
  // result, it is RECOMMENDED that absolute URIs be used in "instance" when
  // possible, and that when relative URIs are used, they include the full path
  // (e.g., "/instances/123").
  string instance = 5 [(buf.validate.field).string.uri = true];

  // Additional details about the problem.
  //
  // APIs using `additional_details` **should** also populate the applicable
  // top-field fields of ProblemDetails; `additional_details` **should not** be
  // used as a substitute for ProblemDetails.
  google.protobuf.Any extra_details = 6;
}